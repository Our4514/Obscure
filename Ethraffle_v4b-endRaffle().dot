digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == feeAddress

IRs:
TMP_37(bool) = msg.sender == feeAddress
CONDITION TMP_37"];
1->2[label="True"];
1->17[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
paused = true

IRs:
paused(bool) := True(bool)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < totalTickets

IRs:
TMP_38(bool) = i < totalTickets
CONDITION TMP_38"];
6->4;
6->7;
7[label="Node Type: IF 7

EXPRESSION:
raffleId == contestants[i].raffleId

IRs:
REF_22(Ethraffle_v4b.Contestant) -> contestants[i]
REF_23(uint256) -> REF_22.raffleId
TMP_39(bool) = raffleId == REF_23
CONDITION TMP_39"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
TicketRefund(raffleId,contestants[i].addr,i)

IRs:
REF_24(Ethraffle_v4b.Contestant) -> contestants[i]
REF_25(address) -> REF_24.addr
Emit TicketRefund(raffleId.REF_25.i)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
contestants[i].addr.transfer(pricePerTicket)

IRs:
REF_26(Ethraffle_v4b.Contestant) -> contestants[i]
REF_27(address) -> REF_26.addr
Transfer dest:REF_27 value:pricePerTicket"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_42(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
RaffleResult(raffleId,totalTickets,address(0),address(0),address(0),0,0)

IRs:
TMP_43 = CONVERT 0 to address
TMP_44 = CONVERT 0 to address
TMP_45 = CONVERT 0 to address
Emit RaffleResult(raffleId.totalTickets.TMP_43.TMP_44.TMP_45.0.0)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
raffleId ++

IRs:
TMP_47(uint256) := raffleId(uint256)
raffleId(uint256) = raffleId + 1"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
nextTicket = 0

IRs:
nextTicket(uint256) := 0(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
blockNumber = block.number

IRs:
blockNumber(uint256) := block.number(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
gaps.length = 0

IRs:
REF_29 -> LENGTH gaps
REF_29 (->gaps) := 0(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
}
